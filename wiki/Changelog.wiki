#summary The version history
#labels Featured

== Version 2.0 ==
_In progress_
 * Implement [http://www.cse.ohio-state.edu/hpcs/WWW/HTML/publications/abs02-6.html Low Inter-reference Recency Set] page replacement policy.

The LIRS policy combines recency and frequency to provide a better hit rate than an LRU policy. It does this without incurring a high penalty, is performed in O(1) time, and maintains its advantage across a wide range of workloads. The disadvantage of this policy is the implementation complexity.

== Version 1.1 ==
This version provided incremental improvements based on user feedback.
 * Fixed issue 20, which identified a race condition when updating a value's weight.
 * Reduced memory usage by optimizing the buffering of recency operations.
 * Reduced read contention by improving how a recency buffer is selected.
 * Strict LRU reordering by a more intelligent draining algorithm.
 * Support for limiting the capacity through a plug-in strategy.

== Version 1.0 ==
The first official release was based on the observation that the state of the page replacement's data structure does not need to be strictly consistent with the hash-table. Instead of applying an LRU reorder operation immediately, the operations are buffered and applied in batches. The LRU list is guarded by a _try-lock_ to provide the simplicity of exclusive mutations without creating contention since a thread's task can be queued for later execution on a buffer. A write buffer and per-segment read buffers are provided to ensure non-blocking behavior. The amortized cost of draining the buffers was determined to be negligible compared to an unbounded !ConcurrentHashMap.

This implementation also introduced the concept of _weighted values_ to allow bounding the map by a constraint other than the number of entries.

Integration of the algorithmic techniques into [http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/collect/MapMaker.html MapMaker] was released in [http://code.google.com/p/guava-libraries Google Guava r08] and was heavily based on this version.

== Version 0.0: _Production_ ==
This [ProductionVersion implementation] was provided as an intermediate solution to users that required a cache that was faster than !LinkedHashMap, but that was not considered a valid solution to be dubbed an official release. It was made available so that users did not accidentally adopt the previous beta or build directly off of _/trunk_.

This implementation guarded the deque by a dedicated lock. It reduced contention compared to !LinkedHashMap by shrinking the critical section and supporting the _Second Chance_ policy as a pseudo-LRU eviction algorithm. In the common case this policy provides a hit rate equivalent to an LRU but with the favorable concurrency behavior of a _FIFO_ policy. However, in certain workloads it may degrade to have a high eviction penalty.

== Version 0.0: Design-2 ==
This attempt implemented the algorithm described in the [Design2 design document]. It used a more mature approach towards a concurrent deque algorithm, but it was not released due to a race condition.

== Version 0.0: _09/2008 beta_ ==
This first attempt explored the basic problems when implementing a concurrent caching library. It provided _FIFO_, _LRU_, and _Second Chance_ policies with a concurrent deque. This implementation was never officially released due to a race condition.