#summary The algorithmic design of a lock-free linked hash map.
#labels Phase-Design

= Introduction =
The following describes the algorithm for a concurrent [http://java.sun.com/javase/6/docs/api/java/util/LinkedHashMap.html LinkedHashMap]. Please note that at this time it has not been fully implemented, but is the end goal.

== Buffers ==
The usage of buffers between elements is a key design choice. When removing an element from the middle of the list, two seperate atomic operations must be preformed (update prev->next, next->prev). As atomic operations are not composable, if concurrent removals of sequential elements occurs then the links can become corrupt. The immediate solutions are to fix links by a backtracking algorithm (error-prone), lock all three nodes, or mark the node as 'dead' and allow it to be removed by the eviction policy. The latter, while simple and safe, consumes a slot in the cache and can be modeled as an eviction queue.

The buffers strategy allows sandboxing each element so that operations on one does not affect its neighbors. Each element owns one side of a shared buffer and is guaranteed that no concurrent operations will be performed. The element can be safely removed and the extra buffer removed by _swinging_ its neighbor's previous pointer across it.

= Use Cases =
== Insertion ==
=== First insertion ===
[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/empty.png]

[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/first-insertion.png]

=== Subsequent insertion ===
[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/initial.png]

[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/subsequent-insertion.png]

== Eviction ==
[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/buffer-eviction.png]

[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/element-eviction.png]

== Removal ==
[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/remove-middle-1.png]

[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/remove-middle-2.png]

[http://concurrentlinkedhashmap.googlecode.com/svn/wiki/images/design/remove-middle-3.png]