############################################################################
# Java production sources
############################################################################
api.build.dir = ${build.dir}/api
api.src.dir = ${basedir}/src/java

############################################################################
# Build artifacts
############################################################################
build.dir = ${basedir}/build

############################################################################
# Cobertura test coverage generator
############################################################################
cobertura.datafile = ${cobertura.dir}/cobertura.ser
cobertura.destdir = ${cobertura.dir}/data-output
cobertura.dir = ${tools.build.dir}/cobertura
cobertura.format = html
cobertura.todir = ${cobertura.dir}/classes

############################################################################
# Packaged artifacts
############################################################################
dist.dir = ${basedir}/dist

############################################################################
# Third-party tools
############################################################################
external.dir = ${basedir}/lib
external.import = ${external.dir}/config/external-config.xml

############################################################################
# FindBugs static analyzer
############################################################################
findbugs.failOnError = false
findbugs.outputFile = ${tools.build.dir}/findbugs.htm
findbugs.reportLevel = low

############################################################################
# Java compiler
############################################################################
javac.debug = true
javac.deprecation = on
javac.fork = no
javac.optimize = off
javac.source = 1.6
javac.target = 1.6
javac.verbose = no

############################################################################
# Javadoc tool
############################################################################
javadoc.build.dir = ${build.dir}/javadoc

############################################################################
# Manifest specification
############################################################################
manifest.impl.title = ${ant.project.name}
manifest.impl.url = http://code.google.com/p/concurrentlinkedhashmap/
manifest.impl.vendor = clhm
manifest.impl.version = 1.0

############################################################################
# PMD source code analyzer
############################################################################
pmd.failOnError = false
pmd.failOnRuleViolation = false
pmd.rulesetfiles = ${external.dir}/config/pmd-config.xml
pmd.shortFilenames = true
pmd.targetjdk = ${javac.target}
pmd.toFile = ${tools.build.dir}/pmd.htm

############################################################################
# Java test sources
############################################################################
test.build.dir = ${build.dir}/test
test.src.dir = ${basedir}/unittest/src/java

############################################################################
# TestNG unit testing
############################################################################
testng.dumpCommand = false
testng.haltonfailure = true
testng.haltonskipped = true
testng.outputdir = ${tools.build.dir}/testng

# Test groups:
#  - development: Validate correctness
#  - efficiency:  Compare eviction algorithms
testng.groups = development

# All tests
test.debugMode = false
test.exhaustive = false

# efficiency benchmark
efficiency.maximumCapacity = 5000
efficiency.workingSetSize = 20000
efficiency.distribution = zipfian
efficiency.distribution.uniform.lower = 0
efficiency.distribution.uniform.upper = 1000
efficiency.distribution.exponential.mean = 1000
efficiency.distribution.gaussian.mean = 1000
efficiency.distribution.gaussian.sigma = 10
efficiency.distribution.poisson.mean = 1000
efficiency.distribution.zipfian.skew = 1.3

# non-concurrent tests
singleThreaded.maximumCapacity = 5000

# concurrency tests
multiThreaded.maximumCapacity = 50000
multiThreaded.iterations = 40000
multiThreaded.nThreads = 20
multiThreaded.timeout = 30

# performance benchmark
benchmark.config.dir = ${basedir}/unittest/cache-benchmark-framework/conf
benchmark.config.file = cachebench-local.xml
benchmark.report.chart = putget
benchmark.report.dir = ${tools.build.dir}/benchmark
benchmark.report.file = LocalMode-java5
benchmark.test.config = clhm-local-2.properties
benchmark.test.heap = 512m
benchmark.test.path = empty.path

#CLHM
benchmark.test.product = manes-ConcurrentLinkedHashMap
benchmark.test.wrapper = org.cachebench.cachewrappers.CLHMCacheWrapper

# LHM
#benchmark.test.product = java-LinkedHashMap
#benchmark.test.wrapper = org.cachebench.cachewrappers.LHMCacheWrapper

# CHM
#benchmark.test.product = java-ConcurrentHashMap
#benchmark.test.wrapper = org.cachebench.cachewrappers.CHMCacheWrapper

############################################################################
# Software tools output
############################################################################
tools.build.dir = ${build.dir}/tools

