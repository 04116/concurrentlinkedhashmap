############################################################################
# Build artifacts
############################################################################
build.dir = ${basedir}/target

############################################################################
# Java production sources
############################################################################
api.build.dir = ${build.dir}/api
api.src.dir = ${basedir}/src/main/java

############################################################################
# Java test sources
############################################################################
test.build.dir = ${build.dir}/test
test.src.dir = ${basedir}/src/test/java
test.resources.dir = ${basedir}/src/test/resources

############################################################################
# Cobertura test coverage generator
############################################################################
cobertura.datafile = ${cobertura.dir}/cobertura.ser
cobertura.destdir = ${cobertura.dir}/data-output
cobertura.dir = ${tools.build.dir}/cobertura
cobertura.format = html
cobertura.todir = ${cobertura.dir}/classes

############################################################################
# Packaged artifacts
############################################################################
dist.dir = ${basedir}/dist

############################################################################
# Third-party tools
############################################################################
external.dir = ${basedir}/lib
external.import = ${external.dir}/config/external-config.xml

############################################################################
# FindBugs static analyzer
############################################################################
findbugs.failOnError = false
findbugs.outputFile = ${tools.build.dir}/findbugs.htm
findbugs.reportLevel = low

############################################################################
# Java compiler
############################################################################
javac.debug = true
javac.deprecation = on
javac.fork = no
javac.optimize = off
javac.source = 1.6
javac.target = 1.6
javac.verbose = no

############################################################################
# Javadoc tool
############################################################################
javadoc.build.dir = ${build.dir}/javadoc

############################################################################
# Manifest specification
############################################################################
manifest.impl.title = ${ant.project.name}
manifest.impl.url = http://code.google.com/p/concurrentlinkedhashmap/
manifest.impl.vendor = clhm
manifest.impl.version = 1.3

############################################################################
# Software tools output
############################################################################
tools.build.dir = ${build.dir}/tools

############################################################################
# PMD source code analyzer
############################################################################
pmd.failOnError = false
pmd.failOnRuleViolation = false
pmd.rulesetfiles = ${external.dir}/config/pmd-config.xml
pmd.shortFilenames = true
pmd.targetjdk = ${javac.target}
pmd.toFile = ${tools.build.dir}/pmd.htm

############################################################################
# TestNG unit testing
############################################################################
testng.dumpCommand = false
testng.haltonfailure = true
testng.haltonskipped = true
testng.outputdir = ${tools.build.dir}/testng

# Test groups:
#  - development: Validate correctness
#  - efficiency:  Compare eviction algorithms
#  - memoryLeak:  Long running test to check for a memory leak
testng.groups = development

############################################################################
# JBoss Cache Benchmark Framework
############################################################################
cacheBenchFwk.heap = 512m
cacheBenchFwk.path = empty.path
cacheBenchFwk.config.dir = ${test.resources.dir}
cacheBenchFwk.config.file = cachebench.xml
cacheBenchFwk.report.chart = putget
cacheBenchFwk.report.dir = ${tools.build.dir}/benchmark
cacheBenchFwk.wrapper = com.googlecode.concurrentlinkedhashmap.benchmark.CacheBenchmark

# Specifies which implementation to benchmark
#cacheBenchFwk.cache.type = MapMaker
#cacheBenchFwk.cache.type = ConcurrentHashMap
#cacheBenchFwk.cache.type = NonBlockingHashMap
#cacheBenchFwk.cache.type = LinkedHashMap_Lru_Sync
cacheBenchFwk.cache.type = ConcurrentLinkedHashMap

# Optionally adds an id for the benchmark run, e.g. when taking the median
cacheBenchFwk.cache.run = 

# See sampleSize in ${cacheBenchFwk.config.file}
# May want to avoid resize penalty for unbounded maps
cacheBenchFwk.cache.initialCapacity = 500000

# Optinally supported: See ${cacheBenchFwk.config.file} for number of threads.
cacheBenchFwk.cache.concurrencyLevel = 32

# Optionally supported (may be unbounded map)
cacheBenchFwk.cache.maximumCapacity = 5000
